<?php

/**
 * Recommendation CLI Application
 *
 * Usage:
 *      Recommendation.phar <genre> <time>
 *
 * "genre" is string of the genre we want e.g. animation, "Action & Adventure".
 *
 * "time" is string of time we want in 24 hours format e.g. 12:00, 23:00.
 *
 */
require_once '../vendor/autoload.php';

define("USER_DEFAULT_TIMEZONE", "Australia/Sydney");
define("ACME_DATA_SOURCE_URI", "https://pastebin.com/raw/cVyp3McN");


// Validate CLI arguments.
if ($argc != 3) {
    print_usage();
    exit(1);
}

$genre = $argv[1];
$time = $argv[2];


// This application runs with Australia/Sydney timezone.
// So if user entered 12:00 that means 12:00 in Australia/Sydney timezone.
date_default_timezone_set(USER_DEFAULT_TIMEZONE);


// Run the application
try {

    // step 1. fetch data source JSON
    $fetcher = new \Yosefda\Recommendation\Fetcher\GuzzleHttpFetcher(new \GuzzleHttp\Client());
    $data_source_json_string = $fetcher->fetch(ACME_DATA_SOURCE_URI);

    // step 2. parse the JSON
    $parser = new \Yosefda\Recommendation\Parser\AcmeMovieShowingsParser($data_source_json_string);
    $movie_showings = $parser->parse();

    // step 3.
    $criteria = ["genre" => $genre, "time" => $time];
    $strategy = new \Yosefda\Recommendation\Strategy\MovieShowingGenreTimeStrategy(
        $criteria,
        $movie_showings
    );
    $recommended_movies = $strategy->getRecommendations();

    print_recommendations($recommended_movies);

} catch (Exception $ex) {
    echo "Application error: {$ex->getMessage()}" . PHP_EOL;
    exit(1);
}

exit(0);


/**
 * Print CLI usage.
 */
function print_usage()
{
    echo PHP_EOL;
    echo "Usage: " . PHP_EOL;
    echo "\t Recommendation.phar <genre> <time>" . PHP_EOL;
    echo PHP_EOL;
    echo "\"genre\" is string of the genre we want e.g. animation, \"Action & Adventure\"." . PHP_EOL;
    echo "\"time\" is string of time we want in 24 hours format e.g. 12:00, 23:00." . PHP_EOL;
    echo PHP_EOL;
}

function print_recommendations(iterable $recommended_movies)
{
    if (empty($recommended_movies)) {
        echo "no movie recommendations" . PHP_EOL;
        return;
    }

    // print movie name and the closest showing time
    foreach ($recommended_movies as $movie) {
        $showings = $movie->getShowings();
        $showing_time = date("g:ia", strtotime($showings[0]));
        echo "{$movie->getName()}, showing at {$showing_time}" . PHP_EOL;
    }
}



